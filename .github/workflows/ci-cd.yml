name: Application CI/CD

on:
  push:
    branches: [ develop, main, feat/github-actions ]
  pull_request:
    branches: [ develop, main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven
          
      - name: Build with Maven
        run: mvn -B package --file pom.xml
        
      - name: Run tests
        run: mvn test
        
#      - name: Upload build artifact
#        uses: actions/upload-artifact@v2
#        with:
#          name: app-jar
#          path: target/*.jar

  build-and-push-image:
    needs: build-and-test
    if: github.event_name == 'push' && (github.ref == 'refs/heads/develop' || github.ref == 'refs/heads/main')
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Download build artifact
        uses: actions/download-artifact@v2
        with:
          name: app-jar
          path: target
          
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
        
      - name: Login to DockerHub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
          
      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: ${{ secrets.DOCKERHUB_USERNAME }}/fast-food-app
          tags: |
            type=ref,event=branch
            type=sha,format=short
            
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: Dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

  deploy-dev:
    needs: build-and-push-image
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: development
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name fast-food-cluster-dev --region us-east-1
        
      - name: Set image tag in kustomization
        run: |
          cd k8s/overlays/dev
          kustomize edit set image ${{ secrets.DOCKERHUB_USERNAME }}/fast-food-app=${{ secrets.DOCKERHUB_USERNAME }}/fast-food-app:sha-${{ github.sha }}
          
      - name: Deploy to development
        run: kubectl apply -k k8s/overlays/dev
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/fast-food-app -n fast-food
          kubectl get pods -n fast-food

  deploy-prod:
    needs: build-and-push-image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    runs-on: ubuntu-latest
    environment: production
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'v1.25.0'
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Update kubeconfig
        run: aws eks update-kubeconfig --name fast-food-cluster-prod --region us-east-1
        
      - name: Set image tag in kustomization
        run: |
          cd k8s/overlays/prod
          kustomize edit set image ${{ secrets.DOCKERHUB_USERNAME }}/fast-food-app=${{ secrets.DOCKERHUB_USERNAME }}/fast-food-app:sha-${{ github.sha }}
          
      - name: Approval for Production Deploy
        uses: trstringer/manual-approval@v1
        with:
          secret: ${{ github.token }}
          approvers: ${{ github.repository_owner }}
          minimum-approvals: 1
          issue-title: "Deploy to Production Application"
          issue-body: "Please approve or deny the deployment to production"
          
      - name: Deploy to production
        run: kubectl apply -k k8s/overlays/prod
          
      - name: Verify deployment
        run: |
          kubectl rollout status deployment/fast-food-app -n fast-food
          kubectl get pods -n fast-food
